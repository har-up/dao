#LINUX下的POSIX
posix是linux下的标准线程操作库
## 引入
```c
#include<pthread.h>
```

## 基本使用
```c
#include<pthread.h>

void* callback(void* arg){
  int i=0;
  for(;i<100;i++){
    if(i==50){
      pthread_exit((void*)result); //线程主动退出
    }
    printf("%s:%d",arg,i);
  }
}

void main(){
  pthread_t thread;
  void* result;
  pthread_create(&thread,NULL,callback,"thread 1");
  
  pthread_join(thread,&result); //主线程等待创建的线程执行完毕；
  
  pthread_cancel(thread); //终止某个线程
}
```

## 互斥锁
```c
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<unistd.h>

int i=0;
pthread_mutex_t mutex;

void* callback(void* arg){
  pthread_mutex_lock(&mutex); //锁住，只让一个线程访问
  for(;i<10;i++){
    printf("%s: %d\n",arg,i);
    sleep(1);
  }
  i=0;
  pthread_mutex_unlock(&mutex);//解锁，释放资源的访问
}

void main(){
  pthread_t thread1;
  pthread_t thread2;
  pthread_t thread3; 
  pthread_mutex_init(&mutex,NULL);
  void* result1;
  void* result2;
  pthread_create(&thread1,NULL,callback,"thread1");
  pthread_create(&thread2,NULL,callback,"thread2");
  pthread_create(&thread3,NULL,callback,"thread3");
             
  pthread_join(thread1,NULL);
  pthread_join(thread2,NULL);
  pthread_join(thread3,NULL);
  pthread_mutex_destroy(&mutex);
}   

```



